language: minimal
if: head_branch =~ ^v1.1beta_helm_pkg_update$ OR branch = v1.1beta_helm_pkg

services:
  - docker

env:
  global:
    - CHANGE_MINIKUBE_NONE_USER=true
    - MINIKUBE_WANTUPDATENOTIFICATION=false
    - MINIKUBE_WANTREPORTERRORPROMPT=false
    - MINIKUBE_HOME=$HOME
    - CHANGE_MINIKUBE_NONE_USER=true
    - KUBECONFIG=$HOME/.kube/config

before_install:
- sudo apt-get -qq -y install coreutils

before_script:
  - curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash

script: 
  - curl -Lo kubectl https://storage.googleapis.com/kubernetes-release/release/v1.7.0/bin/linux/amd64/kubectl && mv kubectl /usr/local/bin/
  - curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 && mv minikube /usr/local/bin/
  - minikube start --vm-driver=none --kubernetes-version=v1.7.0
  - minikube update-context
  - JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1; done
  - helm version
  - echo $(pwd)
  - eval "sed -i -e 's#<AGENT_HELPER_CHART_REV>#${AGENT_HELPER_CHART_REV}#g' k8s/agent+helper/Chart.yaml"
  - eval "sed -i -e 's#<AGENT_CHART_REV>#${AGENT_CHART_REV}#g' k8s/agent/Chart.yaml"
  - eval "sed -i -e 's#<AGENT_HELPER_CHART_REV>#${AGENT_HELPER_CHART_REV}#g' k8s/agent/Chart.yaml"
  - eval "sed -i -e 's#<AGENT_PLG_CHART_REV>#${AGENT_PLG_CHART_REV}#g' k8s/agent+plg/Chart.yaml"
  - eval "sed -i -e 's#<AGENT_HELPER_CHART_REV>#${AGENT_HELPER_CHART_REV}#g' k8s/agent+plg/Chart.yaml"
  - eval "sed -i -e 's#<AGENT_HELPER_CHART_REV>#${AGENT_HELPER_CHART_REV}#g' k8s/example/Chart.yaml"
  - eval "sed -i -e 's#<AGENT_PLG_CHART_REV>#${AGENT_PLG_CHART_REV}#g' k8s/example/Chart.yaml"
  - eval "sed -i -e 's#<AGENT_CHART_REV>#${AGENT_CHART_REV}#g' k8s/example/Chart.yaml"
  - cat k8s/agent+helper/Chart.yaml k8s/agent/Chart.yaml k8s/agent+plg/Chart.yaml k8s/example/Chart.yaml
  - mkdir -p k8s/pkg/agent/$AGENT_CHART_REV k8s/pkg/agent+helper/$AGENT_HELPER_CHART_REV k8s/pkg/agent+plg/$AGENT_PLG_CHART_REV
  - ls -la k8s/pkg
  - helm package k8s/agent+helper -d k8s/pkg/agent+helper/$AGENT_HELPER_CHART_REV
  - helm dependency update k8s/agent
  - helm dependency update k8s/agent+plg
  - helm package k8s/agent -d k8s/pkg/agent/$AGENT_CHART_REV
  - helm package k8s/agent+plg -d k8s/pkg/agent+plg/$AGENT_PLG_CHART_REV
  - echo test example spec
  - helm dependency update k8s/example
  #k8 simulating test
  - printf "\n\n*** test server with tls template\n\n"
  - helm template k8s/example --debug --set-file global.agtConfig=k8s/example/server+tls.env
  - printf "\n\n*** test client with vln template\n\n"
  - helm template k8s/example --debug --set-file global.agtConfig=k8s/example/client+vln.env
  - printf "\n\n*** test gateway agt template\n\n"
  - helm template k8s/example --debug --set-file global.agtConfig=k8s/example/gateway.env
  - printf "\n\n*** pkg indexing\n\n"
  - helm repo index k8s/pkg/agent/$AGENT_CHART_REV --url https://ec-release.github.io/oci/agent/$AGENT_CHART_REV
  - helm repo index k8s/pkg/agent+helper/$AGENT_HELPER_CHART_REV --url https://ec-release.github.io/oci/agent+helper/$AGENT_HELPER_CHART_REV
  - helm repo index k8s/pkg/agent+plg/$AGENT_PLG_CHART_REV --url https://ec-release.github.io/oci/agent+plg/$AGENT_PLG_CHART_REV
  # test agt modes
  - docker run -it --rm --name=justdatest --env-file=k8s/example/gateway.env enterpriseconnect/agent:v1 > agt.log || cat agt.log
  - docker run -it --rm --name=justdatest --env-file=k8s/example/gateway.env enterpriseconnect/agent:v1beta > agt.log || cat agt.log
  # test tls plugin 
  - docker run -it --rm -d --name=justatest --env-file=k8s/example/server+tls.env enterpriseconnect/plugins:v1 && sleep 10 && docker logs justatest 
  - docker run -it --rm -d --name=justanothertest --env-file=k8s/example/server+tls.env enterpriseconnect/plugins:v1beta && sleep 10 && docker logs justanothertest

after_deploy: chmod 775 ./after_deploy.sh && ./after_deploy.sh

deploy:
  provider: pages 
  github_token: $GITHUB_TOKEN
  local_dir: k8s/pkg
  target_branch: disty
  verbose: true
  skip_cleanup: true
  keep_history: true
  on:
    branch: v1.1beta_helm_pkg

notifications:  
  email:  
    recipients:  
    - ec-research@ge.com
    #- enterprise-connect@ge.com
    on_success: always  
    on_failure: always
